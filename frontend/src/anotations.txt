it('a tabela é renderizada', () =>{
            render(<Provider store={store}><App/></Provider>)
            expect(screen.getByTestId('animals-table'))
               .not.toBeNull()
        })
    })

    describe('Quando clico no botão de Novo animal', () =>{
        it('é redirecionado para a página de criar animal', () =>{
            const history = createMemoryHistory()

            render(<Provider store={store}><Router history={history}><App/></Router></Provider>, {wrapper: MemoryRouter})

            const newAnimalBtn = screen.getByTestId('new-animal-btn')
            fireEvent.click(newAnimalBtn)

            expect(history.location.pathname).toBe('/animal/novo')       
        })
    })

        it('Quando o dispatch retorna carregando na operação HttpGet', async () =>{
        const wait = time => new Promise(resolve => setTimeout(resolve, time))
        httpGet.mockImplementation(() => {
            return wait(3000)
        })

        await store.dispatch(fetchAnimals())
        expect(store.getState().animals.status).toBe('loading')
    })